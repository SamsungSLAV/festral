{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE DeriveGeneric #-}

-- |Simple library for test management using Weles as testing server.
module Festral.Weles.API (
    Job(),
    curlJobs,
    getJob,
    getJobWhenDone,
    startJob,
    getFileList,
    getJobOutFile,
    getJobOut
) where

import Network.Curl.Aeson
import Network.Curl
import Control.Applicative
import Data.Aeson
import GHC.Generics
import Control.Concurrent
import System.Process
import System.IO
import qualified Data.ByteString.Lazy as LB
import qualified Data.ByteString.Char8 as B
import Data.List.Split
import Data.List
import Control.Monad
import Data.Maybe
import Festral.Tests.Config
import System.Directory

-- |Job datatype describes json job object got from weles
data Job = Job {
    jobid   :: Int
    ,name   :: String
    ,created:: String
    ,updated:: String
    ,status :: String
    ,info   :: String
} deriving (Generic)

instance FromJSON Job 
instance ToJSON Job 
instance Show Job where
    show (Job id n c u s i) = "{\n \"jobid\" : " ++ show id ++ ",\n \"name\" : "
                ++ show n ++ ",\n \"created\" : " 
                ++ show c ++ ",\n \"updated\" : "
                ++ show u ++ ",\n \"status\" : "
                ++ show s ++ ",\n \"info\" : "
                ++ show i ++ "\n}\n"

configFile = do
    home <- getHomeDirectory
    return $ home ++ "/.festral.conf"
    
welesAddr = do
    conf <- configFile
    confStr <- LB.readFile conf
    let Just config = decode confStr :: Maybe TestRunnerConfig
    return (welesIP config, welesPort config, welesFilePort config)

-- |Get list of all jobs on server
curlJobs :: IO [Job]
curlJobs = do
    (ip, port, _) <- welesAddr
    curlAesonGet (ip ++ ":" ++ port ++ "/api/v1/jobs/")

-- |Get job by its ID
getJob :: Int -> IO (Maybe Job)
getJob id = do
    jobs <- curlJobs
    let job = filter ((id ==) . jobid) jobs
    let res = if length job == 0
                then Nothing
                else Just $ head job
    return res

doneStatuses = ["FAILED", "COMPLETED", "CANCELED"]

-- |Wait until job with given id got status one of 'doneStatuses' and then return this job
getJobWhenDone :: Int -> IO (Maybe Job)
getJobWhenDone id = do
    job <- getJob id
    let res = if isNothing job || (status <$> job) `elem` (map Just doneStatuses)
                then return job
                else threadDelay 1000000 >> getJobWhenDone id
    res

data SimpleJob = SimpleJob {s_jobid :: Int}
    deriving (Show)

instance FromJSON SimpleJob where
    parseJSON = withObject "SimpleJob" $ \v -> SimpleJob <$> v.: "jobid"

-- |Send new job defined in the YAML file with name given as parameter to server
-- Returns id of new task
startJob :: String -> IO (Maybe Int)
startJob yamlFileName = do
    (ip, port, _) <- welesAddr
    (_, out, err, _) <- runInteractiveCommand (
                        "curl -sL " 
                         ++ ip 
                         ++ ":" 
                         ++ port 
                         ++ "/api/v1/jobs/ -F \"uploadfile=@"
                         ++ yamlFileName
                         ++ ";\""
                      )
    outStr <- hGetContents out
    let sjob = decode (LB.fromStrict $ B.pack outStr) :: Maybe SimpleJob
    putStrLn =<< hGetContents err
    return (s_jobid <$> sjob)

testFileUrl id = do
    (ip, _, port) <- welesAddr
    return $ ip ++ ":" ++ port ++ "/" ++ show id ++ "/TESTFILE/"

-- |Returns list of filenames generated by job with given id. 
-- If job with given id does not exists return Nothing.
getFileList :: Int -> IO (Maybe [String])
getFileList id = do
    fileUrl <- testFileUrl id
    (errCode, htmlOut) <- curlGetString fileUrl [CurlFollowLocation True]
    let res = if errCode == CurlOK
            then Just (extractHrefs htmlOut)
            else Nothing
    return res

    where
        extractHrefs = (map (\x -> x!!1)) . (map (splitOn "\"")) . ((filter (isInfixOf "a href=")) . (splitOneOf "<>"))

-- |Returns just contents of the file with given name located on Weles server
-- for job with given id. If file or job does not exists returns Nothing.
getJobOutFile :: Int -> String -> IO (Maybe String)
getJobOutFile id fname = do
    fileUrl <- testFileUrl id
    (errCode, content) <- curlGetString (fileUrl ++ fname) [CurlFollowLocation True]
    let res = if errCode == CurlOK
            then Just content
            else Nothing
    return res

-- |Returns standard output of job given by id (contents of the results file).
getJobOut :: Int -> IO String
getJobOut id = do
    fnames <- getFileList id
    let resFnames = filter (isInfixOf "results") <$> fnames
    let Just resName = if resFnames == Nothing
            then Just []
            else resFnames
    let contents = map (getJobOutFile id) resName
    concat <$> (liftM concat) <$> (sequence contents)
